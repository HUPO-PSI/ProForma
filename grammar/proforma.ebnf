(* Main entry point *)
proforma = compoundPeptidoformIon;
compoundPeptidoformIon = [nameCompoundPeptidoformIon], {modGlobal}, {peptidoformIon, "+"}, peptidoformIon;

(* Global modifications *)
modGlobal = "<", modGlobalOption, ">";
modGlobalOption = ISOTOPE | (modDefined, "@", modGlobalLocation, {",", modGlobalLocation});
ISOTOPE = D | (INT, ELEMENT);
modGlobalLocation = (C,"-",T,E,R,M, [":", aminoAcid]) | (N,"-",T,E,R,M, [":", aminoAcid]) | aminoAcid; 

(* Peptidoform ion: a single entity that is at some point one molecule *)
peptidoformIon = [namePeptidoformIon], {peptidoform, "//"}, peptidoform, [peptidoformCharge];
peptidoformCharge = "/", (SIGNEDINT, | "[", adductIon, {",", adductIon}, "]");
adductIon = formula, CHARGE, [occuranceSpecifier];

(* Peptidoform: a single linear sequence of aminoacids *)
peptidoform = [namePeptidoform], {globalModUnknownPos}, {modLabile}, [modNTerm], sequence, [modCTerm];
globalModUnknownPos = mod, [occuranceSpecifier], {mod, [occuranceSpecifier]}, '?';
modLabile = "{", modInternalDefined, "}";

(* Main sequence elements *)
sequence = sequenceSection, {sequenceSection};
sequenceSection = ambiguousAminoAcid | modRange | sequenceElement;
ambiguousAminoAcid = "(?", sequenceElement, {sequenceElement}, ")";
modRange = "(", sequenceElement, {sequenceElement}, ")", mod, {mod};
sequenceElement = aminoAcid, {modOrLabel};
aminoAcid = LETTER;
nameCompoundPeptidoformIon = "(>>>", NAMETEXT, ")";
namePeptidoformIon = "(>>", NAMETEXT, ")";
namePeptidoform = "(>", NAMETEXT, ")";

(* Modfications *)
modOrLabel = mod | ("[", modLabel, "]");
mod = "[", modInternal, "]";
modUnknownPos = "[", modSingle, [modLabel], , "]";
unknownPosSetting = ("|",P,O,S,I,T,I,O,N,":", modGlobalLocation, {",", modGlobalLocation}) | ("|", L,I,M,I,T, ":", INT) | ("|", C,O,M,K,P) | ("|", C,O,M,U,P);
modInternal = modSingle, [modLabel], {"|", modSingle, [modLabel]};
modDefined = "[", modInternalDefined, "]";
modInternalDefined = modSingle, {"|", modSingle};
modSingle = modFormula | modGlycan | modMass | modAccession| info | modName;

modFormula = F,O,R,M,U,L,A,":", formula, [CHARGE];
formula = WS, formulaElement, {WS, formulaElement}, WS;
formulaElement = ("[", WS, INT, WS, ELEMENT, WS, [SIGNEDINT], WS, "]")|(ELEMENT, WS, [SIGNEDINT]);

modGlycan = G,L,Y,C,A,N,":", MONOSACCHARIDE, [INT], WS, {MONOSACCHARIDE, [INT], WS};

(* Defined to need a sign, which is not needed from a parser perspective *)
modMass = [modMassCV, ":"], SIGN, NUMBER;
modMassCV =  CVAbbreviation | (O,B,S);
CVAbbreviation = U|M|R|X|G;

(* An accession number which is a full integer expect when GNO is used *)
modAccession = (CVName, ":", INT) | (G,N,O,":", ALPHANUMERIC, {ALPHANUMERIC});
CVName = (U,N,I,M,O,D) | (M,O,D) | (R,E,S,I,D) | (X,L,M,O,D);

(* A named modification *)
modName = [CVAbbreviation, ":"], MODTEXT;

(* Info tag *)
info = I,N,F,O,":", MODTEXT;

modNTerm = modOrLabel, [modOrLabel], "-";
modCTerm = "-", modOrLabel, [modOrLabel];

(* Possible labels/named modifications *)
modLabel = "#", (modLabelXL | modLabelBranch | modLabelAmbiguous);
modLabelXL = X,L, ALPHANUMERIC, {ALPHANUMERIC};
modLabelBranch = B,R,A,N,C,H;
modLabelAmbiguous = ALPHANUMERIC, {ALPHANUMERIC}, ["(", SIGNEDNUMBER, ")"];

(* Reused syntactic elements *)
occuranceSpecifier = "^", INT;
CHARGE = ":", Z, SIGNEDINT;

MONOSACCHARIDE = (S,U,L,F,A,T,E)|(P,H,O,S,P,H,A,T,E)|(F,U,C)|(N,E,U,A,C)|(N,E,U,G,C)|(N,E,U,"5",A,C)|(N,E,U,"5",G,C)
                |(N,E,U)|(D,"-",H,E,X)|(E,N,",",A,"-",H,E,X)|(A,"-",H,E,X)|(H,E,X,N,A,C,"(",S,")")|(H,E,X,N,A,C)
                |(H,E,X,N,S)|(H,E,X,S)|(H,E,X,P)|(H,E,X,N)|(H,E,X)|(S,U,G)|(T,R,I)|(T,E,T)|(P,E,N)|(H,E,P)|(O,C,T)
                |(N,O,N)|(D,E,C);

ELEMENT = (H,E)|(L,I)|(B,E)|(N,E)|(N,A)|(M,G)|(A,L)|(S,I)|(C,L)|(A,R)|(C,A)|(S,C)|(T,I)|(C,R)|(M,N)|(F,E)|(C,O)|(N,I)
         |(C,U)|(Z,N)|(G,A)|(G,E)|(A,S)|(S,E)|(B,R)|(K,R)|(R,B)|(S,R)|(Z,R)|(N,B)|(M,O)|(T,C)|(R,U)|(R,H)|(P,D)|(A,G)
         |(C,D)|(I,N)|(S,N)|(S,B)|(T,E)|(X,E)|(C,S)|(B,A)|(L,A)|(C,E)|(P,R)|(N,D)|(P,M)|(S,M)|(E,U)|(G,D)|(T,B)|(D,Y)
         |(H,O)|(E,R)|(T,M)|(Y,B)|(L,U)|(H,F)|(T,A)|(R,E)|(O,S)|(I,R)|(P,T)|(A,U)|(H,G)|(T,L)|(P,B)|(B,I)|(P,O)|(A,T)
         |(R,N)|(F,R)|(R,A)|(A,C)|(T,H)|(P,A)|(N,P)|(P,U)|(A,M)|(C,M)|(B,K)|(C,F)|(E,S)|(F,M)|(M,D)|(N,O)|(L,R)|(R,F)
         |(D,B)|(S,G)|(B,H)|(H,S)|(M,T)|(D,S)|(R,G)|(C,N)|(N,H)|(F,L)|(M,C)|(L,V)|(T,S)|(O,G)|U|W|I|Y|V|K|S|B|C|N|O|F
         |H|P;

DIGIT = "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9";
INT = DIGIT, {DIGIT};
SIGN = "+"|"-";
SIGNEDINT = [SIGN], INT;
SIGNORSIGNEDINT = SIGNEDINT | SIGN;
(* Is full floating point used? If so the following can be added: [E, [SIGN], INT, [".", INT]]*)
NUMBER = INT, [".", INT];
SIGNEDNUMBER = [SIGN], NUMBER;
A = "A"|"a";
B = "B"|"b";
C = "C"|"c";
D = "D"|"d";
E = "E"|"e";
F = "F"|"f";
G = "G"|"g";
H = "H"|"h";
I = "I"|"i";
J = "J"|"j";
K = "K"|"k";
L = "L"|"l";
M = "M"|"m";
N = "N"|"n";
O = "O"|"o";
P = "P"|"p";
Q = "Q"|"q";
R = "R"|"r";
S = "S"|"s";
T = "T"|"t";
U = "U"|"u";
V = "V"|"v";
W = "W"|"w";
X = "X"|"x";
Y = "Y"|"y";
Z = "Z"|"z";
LETTER = A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z;
ALPHANUMERIC = LETTER|DIGIT;
(* Not exhaustively listed all possible characters. Anything unicode graphic not '|', '#', '[', or ']' is possible, also an arbitrary number and nesting of internal brackets is allowed, but this EBNF grammar is limited in this capacity *)
MODGRAPHICCHARACTER = ALPHANUMERIC|SIGN|" "|"?"|"."|","|"<"|">"|"{"|"}"|"("|")"|"_"|"="|":"|";"|"/"|"\\"|"'"|'"'|"*"|"~"|"`"|"@"|"$"|"%"|"^"|"&";
MODTEXT = {MODGRAPHICCHARACTER}, {"[", {MODGRAPHICCHARACTER}, "]"}, {MODGRAPHICCHARACTER};
NAMEGRAPHICCHARACTER = ALPHANUMERIC|SIGN|" "|"?"|"."|","|"<"|">"|"{"|"}"|"["|"]"|"_"|"="|":"|";"|"/"|"\\"|"'"|'"'|"*"|"~"|"`"|"@"|"$"|"%"|"^"|"&";
STARTNAMEGRAPHICCHARACTER = ALPHANUMERIC|SIGN|" "|"?"|"."|","|"<"|"{"|"}"|"["|"]"|"_"|"="|":"|";"|"/"|"\\"|"'"|'"'|"*"|"~"|"`"|"@"|"$"|"%"|"^"|"&";
NAMETEXT = STARTNAMETEXT, NAMETEXTSECTION;
STARTNAMETEXT = (STARTNAMEGRAPHICCHARACTER) | ("(", NAMETEXTSECTION, ")");
NAMETEXTSECTION = {NAMEGRAPHICCHARACTER}, {"(", {NAMEGRAPHICCHARACTER}, ")"},{NAMEGRAPHICCHARACTER};
WS = {" "|"\t"};